package org.stealingdapenta.actions

import com.intellij.openapi.actionSystem.AnAction
import com.intellij.openapi.actionSystem.AnActionEvent
import com.intellij.openapi.application.ApplicationManager
import com.intellij.openapi.project.Project
import com.intellij.openapi.ui.Messages
import org.stealingdapenta.api.ChatGPTClient
import org.stealingdapenta.github.GitHubFileCommitService
import org.stealingdapenta.github.GitHubService
import org.stealingdapenta.ui.FeaturePromptDialog
import java.text.SimpleDateFormat
import java.util.*

class GenerateFeaturePullRequestAction : AnAction("Generate Feature with ChatGPT") {
    override fun actionPerformed(e: AnActionEvent) {
        val project = e.project ?: return

        val dialog = FeaturePromptDialog()
        if (!dialog.showAndGet()) return

        val taskType = dialog.getTaskType()
        val prompt = dialog.getPrompt().takeIf { it.isNotBlank() }
            ?: return showError("Please provide a description.", project)

        val branchName = generateBranchName(taskType)

        GitHubService.createBranch(
            baseBranch = "main",
            newBranch = branchName,
            onSuccess = {
                generateAndCommit(prompt, taskType, branchName, project)
            },
            onFailure = { error ->
                showError(error, project)
            }
        )
    }

    private fun generateAndCommit(prompt: String, taskType: String, branch: String, project: Project) {
        val fullPrompt = """
            You are a senior software engineer contributing directly to a GitHub repo.
            Your task is: $taskType
            
            Instructions: $prompt
            
            Please return just the file name (including path if needed), followed by the new file contents.
            Do not wrap anything in markdown or code blocks. Return ONLY what should be committed.
        """.trimIndent()

        val response = ChatGPTClient.sendPrompt(fullPrompt)

        val splitIndex = response.indexOf("\n")
        if (splitIndex == -1) return showError("Unexpected model response format.", project)

        val filename = response.substring(0, splitIndex).trim()
        val fileContents = response.substring(splitIndex).trim()

        GitHubFileCommitService.commitFile(
            path = filename,
            content = fileContents,
            commitMessage = "$taskType: $prompt",
            branch = branch,
            onSuccess = {
                GitHubService.createPullRequest(
                    title = "$taskType: $prompt",
                    body = "Automatically generated by ChatGPTPilot.\n\nTask: $prompt",
                    head = branch,
                    base = "main",
                    onSuccess = {
                        ApplicationManager.getApplication().invokeLater {
                            Messages.showInfoMessage(project, "Pull request created successfully!", "Success")
                        }
                    },
                    onFailure = { showError(it, project) }
                )
            },
            onFailure = { showError(it, project) }
        )
    }

    private fun showError(message: String, project: Project?) {
        ApplicationManager.getApplication().invokeLater {
            Messages.showErrorDialog(project, message, "Error")
        }
    }

    private fun generateBranchName(taskType: String): String {
        val slug = taskType.lowercase().replace("\\s+".toRegex(), "-")
        val timestamp = SimpleDateFormat("yyyyMMddHHmmss").format(Date())
        return "$slug-$timestamp"
    }
}
