package org.stealingdapenta.actions

import com.intellij.openapi.actionSystem.ActionUpdateThread
import com.intellij.openapi.actionSystem.AnAction
import com.intellij.openapi.actionSystem.AnActionEvent
import com.intellij.openapi.project.Project
import com.intellij.openapi.ui.Messages
import org.json.JSONObject
import org.stealingdapenta.api.ChatGPTClient
import org.stealingdapenta.git.GitIntegration
import org.stealingdapenta.git.ProjectFileWriter
import org.stealingdapenta.github.GitHubService
import org.stealingdapenta.ui.FeaturePromptDialog

class GenerateFeatureAction : AnAction("Generate Feature with ChatGPT") {

    override fun actionPerformed(e: AnActionEvent) {
        val project = e.project ?: return

        val dialog = FeaturePromptDialog()
        if (!dialog.showAndGet()) return

        val prompt = dialog.getPrompt()
        val taskType = dialog.getTaskType()
        val branchName = "chatgpt/${taskType.lowercase().replace(" ", "_")}_${System.currentTimeMillis()}"

        GitHubService.createBranch(newBranch = branchName, onSuccess = {
            val checkoutResult = GitIntegration.runGitCommand(project, "checkout", branchName)
            if (!checkoutResult.contains("Switched to")) {
                showError(project, "❌ Failed to checkout new branch:\n$checkoutResult")
                return@createBranch
            }

            val systemPrompt = """
                You are a powerful GitHub development agent.
                The user will provide a feature request and you must generate the required source files to implement it.
                Respond with a pure JSON object. Each key is a relative file path (e.g. src/main/java/.../MyController.kt),
                and each value is the full content of the file.
                DO NOT include markdown formatting, backticks, or explanations. Just the JSON object.
            """.trimIndent()

            val userPrompt = """
                $taskType requested by user:
                "$prompt"
                Generate any necessary files and changes. Return JSON only.
            """.trimIndent()

            val response = ChatGPTClient.sendPrompt(
                """
                You are a JSON code generation engine.
                $systemPrompt
                
                User says:
                $userPrompt
            """.trimIndent()
            )

            try {
                val fileJson = JSONObject(response) // Force string-based constructor

                for (key in fileJson.keys()) {
                    val filePath = key
                    val content = fileJson.getString(key)
                    ProjectFileWriter.writeFile(project, filePath, content)
                }
            } catch (ex: Exception) {
                showError(project, "❌ Could not parse or write files.\n\nResponse:\n$response")
                return@createBranch
            }

            GitIntegration.stageAll(project)
            GitIntegration.commit(project, "$taskType: $prompt")
            val push = GitIntegration.push(project, branchName)

            if (!push.contains("Done") && !push.contains("success")) {
                showError(project, "🚨 Push failed:\n$push")
                return@createBranch
            }

            GitHubService.createPullRequest(
                title = "$taskType: $prompt",
                body = "Automatically generated by ChatGPTPilot based on your request.",
                head = branchName,
                onSuccess = {
                    showInfo(project, "✅ Pull request created successfully!")
                },
                onFailure = { err -> showError(project, err) }
            )
        }, onFailure = { err ->
            showError(project, err)
        })
    }

    override fun getActionUpdateThread(): ActionUpdateThread = ActionUpdateThread.EDT

    private fun showInfo(project: Project, msg: String) {
        Messages.showInfoMessage(project, msg, "ChatGPTPilot")
    }

    private fun showError(project: Project, msg: String) {
        Messages.showErrorDialog(project, msg, "ChatGPTPilot - Error")
    }
}
