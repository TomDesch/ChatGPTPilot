package org.stealingdapenta.actions

import com.intellij.openapi.actionSystem.ActionUpdateThread
import com.intellij.openapi.actionSystem.AnAction
import com.intellij.openapi.actionSystem.AnActionEvent
import com.intellij.openapi.project.Project
import com.intellij.openapi.ui.Messages
import org.stealingdapenta.git.GitIntegration
import org.stealingdapenta.github.GitHubService
import org.stealingdapenta.ui.FeaturePromptDialog

class GenerateFeatureAction : AnAction() {

    override fun actionPerformed(e: AnActionEvent) {
        val project = e.project ?: return

        val dialog = FeaturePromptDialog()
        if (!dialog.showAndGet()) return

        val prompt = dialog.getPrompt()
        val taskType = dialog.getTaskType()

        val branchName = "chatgpt/${taskType.lowercase().replace(" ", "_")}_${System.currentTimeMillis()}"

        GitHubService.createBranch(
            newBranch = branchName,
            onSuccess = {
                val checkoutResult = GitIntegration.runGitCommand(project, "checkout", branchName)
                if (!checkoutResult.contains("Switched to")) {
                    showError(project, "Failed to checkout new branch:\n$checkoutResult")
                    return@createBranch
                }

                // 🛠️ TODO: ChatGPT logic here: generate file changes based on `prompt`
                // For now, assume the user manually modifies files after this or simulate with dummy change.

                val staged = GitIntegration.stageAll(project)
                val committed = GitIntegration.commit(project, "$taskType: $prompt")
                val pushed = GitIntegration.push(project, branchName)

                GitHubService.createPullRequest(
                    title = "$taskType: $prompt",
                    body = "Automatically generated by ChatGPTPilot based on your prompt.",
                    head = branchName,
                    onSuccess = {
                        showInfo(project, "✅ Pull request created successfully!")
                    },
                    onFailure = { error ->
                        showError(project, error)
                    }
                )
            },
            onFailure = { error ->
                showError(project, error)
            }
        )
    }

    private fun showInfo(project: Project, message: String) {
        Messages.showInfoMessage(project, message, "ChatGPTPilot")
    }

    private fun showError(project: Project, message: String) {
        Messages.showErrorDialog(project, message, "ChatGPTPilot - Error")
    }

    override fun getActionUpdateThread(): ActionUpdateThread = ActionUpdateThread.EDT
}
