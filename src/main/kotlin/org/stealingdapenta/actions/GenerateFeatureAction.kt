package org.stealingdapenta.actions

import com.intellij.openapi.actionSystem.ActionUpdateThread
import com.intellij.openapi.actionSystem.AnAction
import com.intellij.openapi.actionSystem.AnActionEvent
import com.intellij.openapi.project.Project
import com.intellij.openapi.ui.Messages
import org.stealingdapenta.github.GitHubService
import org.stealingdapenta.ui.FeaturePromptDialog

class GenerateFeatureAction : AnAction("Generate Full Feature via GPT") {

    override fun actionPerformed(e: AnActionEvent) {
        val project = e.project ?: return

        val dialog = FeaturePromptDialog()
        if (!dialog.showAndGet()) return

        val prompt = dialog.getPrompt()
        val taskType = dialog.getTaskType()

        val branchName = "chatgpt/${taskType.lowercase().replace(" ", "_")}_${System.currentTimeMillis()}"

        GitHubService.createBranch(
            newBranch = branchName,
            onSuccess = {
                // ðŸ§  NEXT STEP: Send repo + prompt to GPT here, apply changes to working directory
                // e.g., val response = GPT.applyChangesToProject(prompt, repoRoot, branchName)

                // ðŸ“¦ THEN: stage files, commit and push changes (to be implemented next)

                GitHubService.createPullRequest(
                    title = "$taskType: $prompt",
                    body = "Automatically generated by ChatGPTPilot",
                    head = branchName,
                    onSuccess = {
                        showInfo(project, "âœ… Pull request created successfully for branch:\n$branchName")
                    },
                    onFailure = { error ->
                        GitHubService.showErrorDialog(error)
                    }
                )
            },
            onFailure = { error ->
                GitHubService.showErrorDialog(error)
            }
        )
    }

    private fun showInfo(project: Project, message: String) {
        Messages.showInfoMessage(project, message, "ChatGPTPilot")
    }

    override fun getActionUpdateThread(): ActionUpdateThread {
        return ActionUpdateThread.EDT
    }
}
